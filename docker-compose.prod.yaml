
services:

  api:
    build:
      context: .
      dockerfile: Dockerfile
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 5
    env_file:
      - .env
    environment:
      - REDIS_HOST=redis
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
    ports:
      - "8000:8000"
    command: [
      "bash",
      "-c",
      "poetry run alembic upgrade head && poetry run uvicorn app.main:app --reload --port 8000 --host 0.0.0.0"
    ]
    volumes:
      - ./media:/usr/src/app/media
    depends_on:
      - redis
      - db
    networks:
      - web-net

  redis:
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 5
    container_name: redis
    image: redis:latest
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "6379:6379"
    networks:
      - web-net

  mongo:
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 5
    image: mongo:6.0
    container_name: mongo
    ports:
      - "27018:27017"
    volumes:
      - ./data/mongo:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASS}
    env_file:
      - ./.env
    networks:
      - web-net

  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 5
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./media:/media
    depends_on:
      - api
    networks:
      - web-net

  db:
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 5
    image: postgres:16
    ports:
      - "5433:5432"
    env_file:
      - ./.env
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_HOST=${DB_HOST}
      - POSTGRES_PORT=${DB_PORT}
    volumes:
      - ./data/db:/var/lib/postgresql/data
    networks:
      - web-net

  rabbitmq:
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 5
    container_name: rabbitmq
    image: "rabbitmq:3-management"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - web-net

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 5
    env_file:
      - .env
    environment:
      - REDIS_HOST=redis
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
    depends_on:
      - api
      - rabbitmq
      - redis
    command: [
      "bash",
      "-c",
      "poetry run celery -A app.infrastructure.config.celery_settings.app worker --loglevel=info"
    ]
    networks:
      - web-net

networks:
  web-net:
    driver: bridge
